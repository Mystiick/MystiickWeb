@page "/minecraft"
@using MystiickWeb.Shared.Constants;
@using MystiickWeb.Shared.Models;

@inject IMinecraftManager _minecraft;

<PageTitle>Minecraft Server Status</PageTitle>

<h1>Minecraft Server Status</h1>
@if (error != null)
{
    <div class="text-danger">@error</div>
}
@if (message != null)
{
    <div class="text-danger">@message</div>
}

<LoadingSpinner IsLoading="loading" />

@if (model != null)
{

    <div>
        <h3>Server [@model.ServerName] Online</h3>
        <span>Online: @model.CountOnline / @model.CountMaximum</span>
        <div class="row">
        @foreach (var player in model.OnlinePlayers)
        {
            <MinecraftPlayerCard Player="@player" />
        }
        </div>

    </div>
}

@if (!loading && model == null)
{
    <div>
        <h3>Server Offline</h3>
    </div>
}


@code {
    private MinecraftServerData? model;
    private string? error, message;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        try
        {
            Response<MinecraftServerData> response = await _minecraft.GetMinecraftServerData();

            if (response.Success)
                model = response.Value;
        }
        catch (Exception ex)
        {
            error = "An unexpected error has occurred connecting to the server";
#if DEBUG
message = ex.Message;
#endif
        }
        finally
        {
            loading = false;
        }
    }
}
