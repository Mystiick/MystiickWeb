@page "/user/register"
@inherits BasePage
@using MystiickWeb.Shared.Constants;

<h3>Register</h3>
@if (Error != string.Empty)
{
    <div class="text-danger">@Error</div>
}
@if (Message != string.Empty)
{
    <div class="text-danger">@Message</div>
}

<LoadingSpinner IsLoading="IsLoading" />

<div class="col-6 p-3">

    @if (validationErrors.ContainsKey(string.Empty))
    {
        <div class="border border-danger rounded p-2 pb-0 mb-2 bg-danger bg-opacity-25">
            <ul class="mb-2">
                @foreach (var msg in validationErrors[string.Empty])
                {
                    <li>@msg</li>
                }
            </ul>
        </div>
    }

    <div class="mb-3">
        <label for="username">Username</label>
        <input type="text" class="form-control @(validationErrors.ContainsKey(nameof(username)) ? "is-invalid" : "")" id="username" @bind="username" placeholder="" />
        
        @if (validationErrors.ContainsKey(nameof(username)))
        {
            <div class="invalid-feedback">
                @foreach (var msg in validationErrors[nameof(username)])
                {
                    <div>@msg</div>
                }
            </div>
        }
    </div>

    <div class="mb-3">
        <label for="password">Password</label>
        <input type="password" class="form-control @(validationErrors.ContainsKey(nameof(password)) ? "is-invalid" : "")" id="password" @bind=password placeholder="" />

        @if (validationErrors.ContainsKey(nameof(password)))
        {
            <div class="invalid-feedback">
                @foreach (var msg in validationErrors[nameof(password)])
                {
                    <div>@msg</div>
                }
            </div>
        }
    </div>

    <div class="mb-3">
        <label for="confirm">Confirm Password</label>
        <input type="password" class="form-control @(validationErrors.ContainsKey(nameof(confirm)) ? "is-invalid" : "")" id="confirm" @bind=confirm placeholder="" />
        
        @if (validationErrors.ContainsKey(nameof(confirm)))
        {
            <div class="invalid-feedback">
                @foreach (var msg in validationErrors[nameof(confirm)])
                {
                    <div>@msg</div>
                }
            </div>
        }
    </div>

    <div class="form-floating">
        <button class="btn btn-primary" @onclick="OnClick">Submit</button>
    </div>
</div>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string confirm = string.Empty;
    private Dictionary<string, List<string>> validationErrors = new();

    private async Task OnClick()
    {
        List<string> errors = new();
        validationErrors.Clear();

        if (IsFormValid())
            errors = await PostApiAsync<List<string>>($"{ControllerConstants.Users}/register", new { Username = username, Password = password, ConfirmPassword = confirm }) ?? new();

        if (errors.Any())
        {
            foreach(var err in errors)
            {
                AddValidationError(string.Empty, err);
            }
        }
        else
        {
            // TODO: Just reset for now, do something better later
            username = string.Empty;
            password = string.Empty;
            confirm = string.Empty;
        }

        await Task.CompletedTask;
    }

    private bool IsFormValid()
    {

        if (string.IsNullOrWhiteSpace(username))
            AddValidationError(nameof(username), "Field is required.");

        if (string.IsNullOrWhiteSpace(password))
            AddValidationError(nameof(password), "Field is required.");

        if (string.IsNullOrWhiteSpace(confirm))
            AddValidationError(nameof(confirm), "Field is required.");

        if (password != confirm)
            AddValidationError(nameof(confirm), "Password and Confirm Password must be the same.");

        return !validationErrors.Any();
    }

    private void AddValidationError(string field, string message)
    {
        if (validationErrors.ContainsKey(field))
            validationErrors[field].Add(message);
        else
            validationErrors.Add(field, new List<string> { message });
    }
}
