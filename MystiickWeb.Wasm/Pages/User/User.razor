@page "/user"
@inherits BasePage

@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Authorization;

@using Microsoft.AspNetCore.Http
@using MystiickWeb.Shared.Constants;
@using MystiickWeb.Shared.Models.User;
@using MystiickWeb.Wasm.Auth;

@inject NavigationManager _navigationManager;
@inject UserManager _userManager;
@inject AuthenticationStateProvider _asp;

<AuthorizeView>
    <Authorized>
        <h3>Profile</h3>
        <div class="row mb-3">
            <div class="col-5">
                <p>Username: @context.User.FindFirst(ClaimTypes.Name)?.Value </p>
            </div>
            <div class="col-1 text-end p-0">
                <button class="btn btn-primary" @onclick="Logout">Logout</button>
            </div>
        </div>

        <ExpandableCard Header="Change Username">
            <div>
                <label class="form-label" for="cu-password">Current Password</label>
                <input type="password" class="form-control" id="cu-password" @bind="changeUsernameUser.Password" />
            </div>
            <hr />
            <div>
                <label class="form-label" for="cu-username">New Username</label>
                <input type="text" class="form-control" id="cu-username" @bind="newUsername" />
            </div>
            <div class="pt-3 text-end p-0">
                <button class="btn btn-primary" @onclick="async (x) => await ChangeUsername()">Update Username</button>
            </div>
        </ExpandableCard>

        <ExpandableCard Header="Change Password">
            <div>
                <label class="form-label" for="username">Current Password</label>
                <input type="password" class="form-control" id="password" @bind="currentUser.Password" />
            </div>
            <hr />
            <div class="border border-warning rounded pb-0 mb-2 bg-warning bg-opacity-25    ">
                <ul class="m-1">
                    <li>Must be at least 6 characters.</li>
                    <li>Must have at least one non alphanumeric character.</li>
                    <li>Must have at least one digit ('0'-'9').</li>
                    <li>Must have at least one uppercase ('A'-'Z').</li>
                </ul>
            </div>
            <div>
                <label class="form-label" for="username">New Password</label>
                <input type="password" class="form-control" id="password" @bind="newUser.Password" />
            </div>
            <div>
                <label class="form-label" for="username">Confirm New Password</label>
                <input type="password" class="form-control" id="password" @bind="newUser.ConfirmPassword" />
            </div>
            <div class="pt-3 text-end p-0">
                <button class="btn btn-primary" @onclick="ChangePassword">Update Password</button>
            </div>
        </ExpandableCard>

        @*@foreach (var claim in context.User.Claims)
        {
            <p>@claim.Type: @claim.Value</p>
        }*@
    </Authorized>
    <NotAuthorized>
        <h3>Not Signed In</h3>
        <div class="mb-3"><a class="btn btn-primary" href="/user/login">Login</a></div>
        <div><a class="btn btn-primary" href="/user/register">Register</a></div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private readonly Credential currentUser = new();
    private readonly Credential newUser = new();

    private readonly Credential changeUsernameUser = new();
    private string newUsername = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        newUsername = (await _asp.GetAuthenticationStateAsync()).User.FindFirst(ClaimTypes.Name)?.Value ?? "";
        await base.OnInitializedAsync();
    }

    private async Task Logout()
    {
        var response = await CallApi(_userManager.Logout());

        if (response.Success)
            _navigationManager.NavigateTo("/user/login");
    }

    private async Task ChangeUsername()
    {
        currentUser.Username = (await _asp.GetAuthenticationStateAsync()).User.Identity?.Name ?? "";
        await CallApi(_userManager.ChangeUsername(changeUsernameUser, newUsername));

        Console.WriteLine((await _asp.GetAuthenticationStateAsync()).User.Identity.Name);
    }

    private async Task ChangePassword()
    {
        await CallApi(_userManager.ChangePassword(currentUser, newUser));
    }
}
