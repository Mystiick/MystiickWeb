@page "/photography"
@page "/photography/{imageGuid}"
@using MystiickWeb.Shared.Models

@inherits BasePage
@inject NavigationManager NavigationManager

<PageTitle>Photography</PageTitle>
<h1 class="inline-block">Photography</h1>

@if (Error != string.Empty)
{
    <div class="text-danger">@Error</div>
}
@if (Message != string.Empty)
{
    <div class="text-danger">@Message</div>
}

@if (IsLoading)
{
    <span class="spinner-border" role="status" id="loading">
        <span class="sr-only">&nbsp;</span>
    </span>
}

@if (string.IsNullOrWhiteSpace(imageGuid))
{
    <div class="row">
        <div class="col-xl-2 gap-2 border-end">
            @if (categories != null)
            {
                @foreach (ImageCategory cat in categories)
                {
                    <button class="btn btn-outline-primary mb-1 w-100" @onclick="@(x => LoadThumbnails(cat.Name))">
                        <span>@cat.Name</span>
                        <span>(@cat.Count)</span>
                    </button>
                }
            }
        </div>

        <div class="col-xl-10">
            @if (images != null)
            {
                <Paginator @ref="imagePager" Label="Photo pager" Items="images" PageSize="30" Name="ImagePager">
                    <div class="row">
                        @foreach (ImageResult img in imagePager.DisplayItems)
                        {
                            <div class="col-xxl-2 col-xl-3 col-lg-6">
                                <ImageCard Image="img" OnImageClick="ShowPreview" OnSubcategoryClick="LoadThumbnailsBySubcategory" OnTagClick="LoadThumbnailsByTag" />
                            </div>
                        }
                    </div>
                </Paginator>
            }
        </div>
    </div>
}
else if (@previewImage != null)
{
    <div>
        <div>
            <img src="/api/image/@imageGuid/img?thumbnail=false">
        </div>

        <div>
            <span>Date Taken:</span>
            <span>@previewImage.Created</span>
        </div>
        <div>
            <span>Camera:</span>
            <span>@previewImage.Camera.Model</span>
        </div>
        <div>
            <span>ISO:</span>
            <span>@previewImage.Camera.ISO</span>
        </div>
        <div>
            <span>Aperature:</span>
            <span>@previewImage.Camera.Aperature</span>
        </div>
        <div>
            <span>Focal Length:</span>
            <span>@(previewImage.Camera.FocalLength)mm</span>
        </div>
        <div>
            <span>Shutter Speed:</span>
            <span>@previewImage.Camera.ShutterSpeed Seconds</span>
        </div>
    </div>
}

@code {
    public ImageCategory[]? categories;
    public ImageResult[]? images;
    public bool imagesLoading = false;
    public ImageResult? previewImage;

    public Paginator imagePager = new Paginator();

    [Parameter]
    public string? imageGuid { get; set; }
    [Inject]
    private Services.CacheService _cache { get; set; }

    protected override async Task OnInitializedAsync()
    {
        categories = await GetFromApiAsync<ImageCategory[]>("api/image/categories");

        if (!string.IsNullOrEmpty(imageGuid))
        {
            previewImage = await GetFromApiAsync<ImageResult>($"api/image/{imageGuid}");
        }
    }

    public override async Task<T> GetFromApiAsync<T>(string path)
    {
        // Set to null first to clear out existing list, preventing images from popping in over the old ones, one at a time
        images = null;
        _cache.Delete("ImagePager");

        return await base.GetFromApiAsync<T>(path);
    }

    protected async Task LoadThumbnails(string category)
    {
        images = await GetFromApiAsync<ImageResult[]>($"api/image/categories/{category}");
    }

    protected async Task LoadThumbnailsBySubcategory(string subcategory)
    {
        images = await GetFromApiAsync<ImageResult[]>($"api/image/subcategories/{subcategory}");
    }

    protected async Task LoadThumbnailsByTag(string tag)
    {
        images = await GetFromApiAsync<ImageResult[]>($"api/image/tags/{tag}");
    }

    protected void ShowPreview(ImageResult image)
    {
        previewImage = image;
        NavigationManager.NavigateTo($"photography/{image.GUID}");
    }
}
