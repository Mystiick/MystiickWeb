@page "/programming/"
@page "/programming/{ID}"
@inherits BasePage

@using MystiickWeb.Shared.Constants;
@using MystiickWeb.Shared.Models.Posts;

<h1 class="inline-block">Programming</h1>

@if (Error != string.Empty)
{
    <div class="text-danger">@Error</div>
}
@if (Message != string.Empty)
{
    <div class="text-danger">@Message</div>
}

<LoadingSpinner IsLoading="IsLoading" />

<div class="border-bottom">
    <ul style="list-style: none;">
        <li><a href="https://github.com/Mystiick">Github</a></li>
        <li><a href="https://hub.docker.com/u/mystiick">Docker Hub</a></li>
    </ul>
</div>

@if (Posts != null)
{
    <Paginator @ref="postPager"  Label="Photography post pager" Items="Posts" PageSize="2" Name="ProgrammingPostPager">
        @if (postPager != null)
        {
            @foreach (ProgrammingPost post in postPager.DisplayItems)
            {
                <article class="p-2 border-bottom">
                    <h3>@post.Title</h3>
                    <h5>@post.CreatedDate.ToShortDateString()</h5>

                    @((MarkupString)Markdig.Markdown.ToHtml(post.Text))

                    @if (post.Attachments.Any())
                    {
                        <ul class="list-group">
                            @foreach (Link link in post.Attachments)
                            {
                                <li class="list-group-item">
                                    <div class="oi oi-@(string.IsNullOrWhiteSpace(link.Icon) ? "external-link" : link.Icon)"></div>
                                    <a href="@link.Url" target="_blank">@link.Text</a>
                                </li>
                            }
                        </ul>
                    }
                </article>
            }

        }
    </Paginator>
}


@code {
    private ProgrammingPost[]? Posts;
    private Paginator? postPager;

    [Parameter] public string ID { get; set; } = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(ID))
        {
            Posts = new ProgrammingPost[] { await GetFromApiAsync<ProgrammingPost>($"{ControllerConstants.Posts}/{ID}") };
        }
        else
        {
            Posts = await GetFromApiAsync<ProgrammingPost[]>($"{ControllerConstants.Posts}?postType=programming");
        }
    }
}
